version: '3.9'

services:
  postgres:
    image: postgres:16
    container_name: pg-database
    environment:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
      POSTGRES_DB:
    volumes:
      - ./ny_taxi_postgres_data:/var/lib/postgresql/data
    ports:
      - $POSTGRES_PORT:$POSTGRES_PORT
    networks:
      - pg-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER", "-d", "$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    depends_on:
      postgres:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "pg_isready", "-h", "postgres", "-p", "$POSTGRES_PORT", "-U", "$POSTGRES_USER", "-d", "$POSTGRES_DB"]
    image: dpage/pgadmin4:8.2
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL:
      PGADMIN_DEFAULT_PASSWORD:
    volumes:
      - ./pgadmin_data:/var/lib/pgadmin
    ports:
      - $PGADMIN_PORT:80
    networks: 
      - pg-network
 
  ingest_data_misc:
    image: taxi_ingest:0.0.0
    hostname: ingest_data_misc
    container_name: ingest_data_misc
    build: 
      context: ./ingest_data_misc
      dockerfile: dockerfile
    entrypoint: [/bin/bash, -c]
    working_dir: /app
    volumes:
      - ./:/app
    depends_on:
      - postgres
    networks:
      - pg-network
    deploy:
      # mode: replicated
      replicas: 0 

  pgcli:
    image: ai2ys/dockerized-pgcli:4.0.1
    container_name: pgcli
    depends_on:
      - postgres
    networks:
      - pg-network
    entrypoint: /bin/bash
    command: [-c, pgcli -h pg-database -p $POSTGRES_PORT -U $POSTGRES_USER -d $POSTGRES_DB]
    deploy:
      # mode: replicated
      replicas: 0


networks:
  pg-network:
    driver: bridge